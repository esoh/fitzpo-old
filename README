This backend service requires:

npm (node)
mongodb

Directions for testing:

Install node packages:
npm install

Run the mongodb service locally:
MAC:
brew services start mongodb

Define your own session secret string in ./config/database.js

Run server:
npm start

OR if you have nodemon installed globally:
nodemon

If you're developing, it's highly recommended to use nodemon instead of
the defined npm start to avoid having to restart the server every time we make a
file change. It's a development package, so it should be installed globally or
as a development dependency, there is no reason for a normal browser to require
nodemon as it is a development tool. Here, it does not exist as a development
dependency, and is installed globally, per machine.
nodemon will search package.json for the main property, and start it there.
To install nodemon globally:
sudo npm install -g nodemon

If you're developing the frontend, it's recommended to have Angular CLI
installed for automatic installation and configuration of dependencies.
To install angular-cli globally:
sudo npm install -g angular-cli

To run the frontend with angular cli, cd into the angular-src folder and run:
npm install
ng serve -o

Testing the backend:
You can test the requests via the google chrome extension "Postman" or any other
request testing application.

Things to test:
POST ./users/register
   ex:
      HEADERS:
         Content-Type: application/json
      BODY:
         {
            "name": "John Doe",
            "email": "jdoe@gmail.com",
            "username": "jdoe",
            "password": "123456"
         }
POST ./users/authenticate
      HEADERS:
         Content-Type: application/json
      BODY:
         {
            "username": "jdoe",
            "password": "123456"
         }
GET ./users/profile
      HEADERS:
         Authorization: Bearer .... (token generated from authenticate request)


Stop mongodb service:
MAC:
brew services stop mongodb

Notes:
"npm start" calls "node app", as defined in package.json.

The "main" is set to "app.js" as our entry point at npm initilalization.

npm is the node js package handler.

nodemon allows us to make changes without having to rerun the service manually.

express is a popular node framework that allows for less code and effort.

mongoose translates objects in code to objects in mongodb.

bcrypt is encryption.

cors specifies the handling of cross-origin requests (requests from different
origins than the app), specifying who can request and which requests are
allowed from them. Without it, the app cannot access resources from other
domains.
Locally, it allows us to make requests from front end even if it's on a
different port.
Including this automatically sets up CORS so that we don't have to do it
manually using express.

jsonwebtoken (JWT) is used as an authentication token that is generated from
authentication, and is used for API calls by authenticated users.

body-parser parses requests.

passport handles the success/failure of authenticating requests. It can provide
for persistent logins, authenticate requests, verify passwords, and more.
passport-jwt uses a login strategy with json web tokens.

The secret in ./config/database.js is the key with which token hashes are
computed.

For the front end, we are using angular 6. The front end angular app is
initialized using 'ng new angular-src' using the angular-cli.

TODO:
   implement https (tls/ssl)
